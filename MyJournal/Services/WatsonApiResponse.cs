// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MyJournal.Services;
//
//    var watsonApiResponse = WatsonApiResponse.FromJson(jsonString);

namespace MyJournal.Services
{
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class WatsonApiResponse
    {
        [JsonProperty("document_tone")]
        public DocumentTone DocumentTone { get; set; }

        [JsonProperty("sentences_tone")]
        public SentencesTone[] SentencesTone { get; set; }
        public bool Error { get; set; }
        public string ErrorText { get; set; }
    }

    public partial class DocumentTone
    {
        [JsonProperty("tones")]
        public Tone[] Tones { get; set; }
    }

    public partial class Tone
    {
        [JsonProperty("score")]
        public double Score { get; set; }

        [JsonProperty("tone_id")]
        public string ToneId { get; set; }

        [JsonProperty("tone_name")]
        public string ToneName { get; set; }
    }

    public partial class SentencesTone
    {
        [JsonProperty("sentence_id")]
        public long SentenceId { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("tones")]
        public Tone[] Tones { get; set; }
    }

    public partial class WatsonApiResponse
    {
        public static WatsonApiResponse FromJson(string json) => JsonConvert.DeserializeObject<WatsonApiResponse>(json, MyJournal.Services.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this WatsonApiResponse self) => JsonConvert.SerializeObject(self, MyJournal.Services.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
