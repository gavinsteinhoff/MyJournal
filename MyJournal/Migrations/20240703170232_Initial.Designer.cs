// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyJournal.Data;

#nullable disable

namespace MyJournal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240703170232_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyJournal.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("AllowWatson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MyJournal.Models.CustomModels.ApiData", b =>
                {
                    b.Property<int>("ApiDataID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApiDataID"));

                    b.Property<int>("DailyInformationId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentTonesDocumentToneID")
                        .HasColumnType("int");

                    b.HasKey("ApiDataID");

                    b.HasIndex("DailyInformationId")
                        .IsUnique();

                    b.HasIndex("DocumentTonesDocumentToneID");

                    b.ToTable("ApiDatas");
                });

            modelBuilder.Entity("MyJournal.Models.CustomModels.ApiData+DocumentTone", b =>
                {
                    b.Property<int>("DocumentToneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentToneID"));

                    b.HasKey("DocumentToneID");

                    b.ToTable("DocumentTone");
                });

            modelBuilder.Entity("MyJournal.Models.CustomModels.ApiData+SentenceTone", b =>
                {
                    b.Property<int>("SentenceToneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SentenceToneID"));

                    b.Property<int?>("ApiDataID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SentenceToneID");

                    b.HasIndex("ApiDataID");

                    b.ToTable("SentenceTone");
                });

            modelBuilder.Entity("MyJournal.Models.CustomModels.ApiData+Tone", b =>
                {
                    b.Property<int>("ToneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToneID"));

                    b.Property<int?>("DocumentToneID")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<int?>("SentenceToneID")
                        .HasColumnType("int");

                    b.Property<string>("ToneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ToneID");

                    b.HasIndex("DocumentToneID");

                    b.HasIndex("SentenceToneID");

                    b.ToTable("Tone");
                });

            modelBuilder.Entity("MyJournal.Models.CustomModels.CustomTemplates", b =>
                {
                    b.Property<int>("CustomTemplateKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomTemplateKey"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomTemplateKey");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("CustomTemplates");
                });

            modelBuilder.Entity("MyJournal.Models.CustomModels.DailyInformation", b =>
                {
                    b.Property<int>("DailyInformationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyInformationID"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DailyInformationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DownTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExcitedForTomorrow")
                        .HasColumnType("int");

                    b.Property<int>("GeneratedMood")
                        .HasColumnType("int");

                    b.Property<bool>("GoneThroughWatson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("HoursSlept")
                        .HasColumnType("int");

                    b.Property<string>("JournalText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinExercising")
                        .HasColumnType("int");

                    b.Property<int>("MinHobby")
                        .HasColumnType("int");

                    b.Property<int>("MinPhone")
                        .HasColumnType("int");

                    b.Property<int>("NumGoodThings")
                        .HasColumnType("int");

                    b.Property<int>("NumPoorThings")
                        .HasColumnType("int");

                    b.Property<int>("OverallDay")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserMood")
                        .HasColumnType("int");

                    b.HasKey("DailyInformationID");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("DailyInformations");
                });

            modelBuilder.Entity("MyJournal.Models.CustomModels.Sharing", b =>
                {
                    b.Property<int>("SharingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SharingID"));

                    b.Property<string>("GetterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("int");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SharingID");

                    b.HasIndex("GetterId");

                    b.HasIndex("GiverId");

                    b.ToTable("Sharings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MyJournal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MyJournal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyJournal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MyJournal.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyJournal.Models.CustomModels.ApiData", b =>
                {
                    b.HasOne("MyJournal.Models.CustomModels.DailyInformation", "DailyInformation")
                        .WithOne("ApiData")
                        .HasForeignKey("MyJournal.Models.CustomModels.ApiData", "DailyInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyJournal.Models.CustomModels.ApiData+DocumentTone", "DocumentTones")
                        .WithMany()
                        .HasForeignKey("DocumentTonesDocumentToneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyInformation");

                    b.Navigation("DocumentTones");
                });

            modelBuilder.Entity("MyJournal.Models.CustomModels.ApiData+SentenceTone", b =>
                {
                    b.HasOne("MyJournal.Models.CustomModels.ApiData", null)
                        .WithMany("SentenceTones")
                        .HasForeignKey("ApiDataID");
                });

            modelBuilder.Entity("MyJournal.Models.CustomModels.ApiData+Tone", b =>
                {
                    b.HasOne("MyJournal.Models.CustomModels.ApiData+DocumentTone", "DocumentTone")
                        .WithMany("Tones")
                        .HasForeignKey("DocumentToneID");

                    b.HasOne("MyJournal.Models.CustomModels.ApiData+SentenceTone", null)
                        .WithMany("Tones")
                        .HasForeignKey("SentenceToneID");

                    b.Navigation("DocumentTone");
                });

            modelBuilder.Entity("MyJournal.Models.CustomModels.CustomTemplates", b =>
                {
                    b.HasOne("MyJournal.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("MyJournal.Models.CustomModels.DailyInformation", b =>
                {
                    b.HasOne("MyJournal.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("MyJournal.Models.CustomModels.Sharing", b =>
                {
                    b.HasOne("MyJournal.Models.ApplicationUser", "Getter")
                        .WithMany("Getter")
                        .HasForeignKey("GetterId");

                    b.HasOne("MyJournal.Models.ApplicationUser", "Giver")
                        .WithMany("Giver")
                        .HasForeignKey("GiverId");

                    b.Navigation("Getter");

                    b.Navigation("Giver");
                });

            modelBuilder.Entity("MyJournal.Models.ApplicationUser", b =>
                {
                    b.Navigation("Getter");

                    b.Navigation("Giver");
                });

            modelBuilder.Entity("MyJournal.Models.CustomModels.ApiData", b =>
                {
                    b.Navigation("SentenceTones");
                });

            modelBuilder.Entity("MyJournal.Models.CustomModels.ApiData+DocumentTone", b =>
                {
                    b.Navigation("Tones");
                });

            modelBuilder.Entity("MyJournal.Models.CustomModels.ApiData+SentenceTone", b =>
                {
                    b.Navigation("Tones");
                });

            modelBuilder.Entity("MyJournal.Models.CustomModels.DailyInformation", b =>
                {
                    b.Navigation("ApiData");
                });
#pragma warning restore 612, 618
        }
    }
}
