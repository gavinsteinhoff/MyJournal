@model IEnumerable<MyJournal.Models.CustomModels.DailyInformation>

@{
    ViewData["Title"] = "Index";
    int daysWithGoodMood = 0;
    int daysInARow = 0;
    DateTime lastDate = Model.FirstOrDefault().DailyInformationDateTime;
    List<int> moodData = new List<int>();
    List<string> dataLabel = new List<string>();
    List<int> workOutData = new List<int>();
    List<int> sleepData = new List<int>();
}


<div class="row">
    <div class="col bg-dark border-top border-light text-light py-3 sideMenuLink">
        @foreach (var item in Model)
        {
            <a asp-action="Details" asp-route-id="@item.DailyInformationID">
                @item.DailyInformationDateTime.ToString("MM/dd/yy") - @Html.DisplayFor(modelItem => item.Title)
            </a>
            <br />

            TimeSpan diff = item.DailyInformationDateTime - lastDate;

            if (diff.Days == 1)
            {
                daysInARow++;
            }
            else
            {
                daysInARow = 0;
            }

            lastDate = item.DailyInformationDateTime;

            if (item.UserMood > 2)
            {
                daysWithGoodMood++;
            }

            dataLabel.Add(item.DailyInformationDateTime.ToString("MM/dd/yy"));

            moodData.Add(item.UserMood);
            workOutData.Add(item.MinWorkedOut);
            sleepData.Add(item.HoursSlept);
        }

    </div>
    <div class="col-12 col-md-10 py-2">

        <a asp-action="Create">Create New</a>

        <canvas id="myChart" height="100"></canvas>

        <div class="stats my-5">
            <div class="stat-holder">
                <div class="stat" id="mood">
                    @Math.Round(Model.Average(x => x.UserMood), 1)
                </div>
                Average Mood
            </div>

            <div class="stat-holder">
                <div class="stat">
                    @daysWithGoodMood
                </div>
                Days With Good Mood
            </div>

            <div class="stat-holder">
                <div class="stat" id="workingOut">
                    @Math.Round(Model.Average(x => x.MinWorkedOut), 0)
                </div>
                Average Minutes Working Out a Day
            </div>

            <div class="stat-holder">
                <div class="stat" id="sleep">
                    @Math.Round(Model.Average(x => x.HoursSlept), 0)
                </div>
                Average Hours of Sleep a Day
            </div>

            <div class="stat-holder">
                <div class="stat">
                    @daysInARow
                </div>
                Days in a Row
            </div>
        </div>

    </div>
</div>




@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>
    <script>
        @{
            string JsonMoodData = Newtonsoft.Json.JsonConvert.SerializeObject(moodData);
            string JsonWorkOutData = Newtonsoft.Json.JsonConvert.SerializeObject(workOutData);
            string JsonSleepData = Newtonsoft.Json.JsonConvert.SerializeObject(sleepData);
            string JsonDateLabel = Newtonsoft.Json.JsonConvert.SerializeObject(dataLabel);
        }

        $(document).ready(function () {
            createChart("myChart",@Html.Raw(JsonDateLabel),@Html.Raw(JsonMoodData),1)
        });

        $("#mood").click(function () {
            createChart("myChart",@Html.Raw(JsonDateLabel),@Html.Raw(JsonMoodData),1)
        });

        $("#workingOut").click(function () {
            createChart("myChart",@Html.Raw(JsonDateLabel),@Html.Raw(JsonWorkOutData),15);
        });

        $("#sleep").click(function () {
            createChart("myChart",@Html.Raw(JsonDateLabel),@Html.Raw(JsonSleepData),1);
        });


        function createChart(chartName,labels,data,yStep) {
            new Chart(document.getElementById(chartName), {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        borderColor: "#38a9e4",
                        data: data,
                        fill: false,
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            display: true,
                            ticks: {
                                suggestedMin: 4,
                                stepSize: yStep
                            }
                        }]
                    },
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: 'Daily Stats'
                    }
                }
            });
        }
    </script>
}
