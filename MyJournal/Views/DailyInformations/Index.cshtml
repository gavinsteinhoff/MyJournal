@model IEnumerable<MyJournal.Models.CustomModels.DailyInformation>
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Index";
}


<div class="row">
    <div class="col bg-dark border-top border-light text-light sideMenuLink">
        @foreach (var item in Model.OrderByDescending(x => x.DailyInformationDateTime).Take(20))
        {
            <a asp-action="Details" asp-route-id="@item.DailyInformationID">
                @item.DailyInformationDateTime.ToString("MM/dd/yy") - @Html.DisplayFor(modelItem => item.Title)
            </a>
            <br />
        }
    </div>

    <div class="col-12 col-md-10 py-2">

        <a class="btn btn-info mb-5" asp-action="Create">Create New</a>

        <nav>
            <ul class="pagination">
                <li class="page-item @ViewBag.Active7">
                    <a class="page-link" asp-action="Index" asp-route-daysOld="7">
                        Past 7 Days
                    </a>
                </li>
                <li class="page-item @ViewBag.Active30">
                    <a class="page-link" asp-action="Index" asp-route-daysOld="30">
                        Past 30 Days
                    </a>
                </li>
                <li class="page-item @ViewBag.Active183">
                    <a class="page-link" asp-action="Index" asp-route-daysOld="183">
                        Past 6 Months
                    </a>
                </li>
                <li class="page-item @ViewBag.Active365">
                    <a class="page-link" asp-action="Index" asp-route-daysOld="365">
                        Past Year
                    </a>
                </li>
            </ul>
        </nav>

        @if (Model.Count() >= 5)
        {
            <canvas id="myChart" height="100"></canvas>
            <div class="stats my-5">
                <div class="stat-holder">
                    <div class="stat active" id="mood">
                        @Math.Round(Model.Average(x => x.UserMood), 1)
                    </div>
                    Average Mood
                </div>

                <div class="stat-holder">
                    <div class="stat" id="overalMood">
                        @Model.Count(x => x.UserMood >= 3)
                    </div>
                    Days With Good Mood
                </div>

                <div class="stat-holder">
                    <div class="stat" id="workingOut">
                        @Math.Round(Model.Average(x => x.MinExercising), 0)
                    </div>
                    Average Minutes Working Out a Day
                </div>

                <div class="stat-holder">
                    <div class="stat" id="sleep">
                        @Math.Round(Model.Average(x => x.HoursSlept), 1)
                    </div>
                    Average Hours of Sleep a Day
                </div>

                <div class="stat-holder">
                    <div class="stat">
                        @Model.Count()
                    </div>
                    Journals in this period
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-danger" role="alert" id="error">You must have at least 5 days completed to unlock reporting</div>
        }

    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        let neededHeight = ($('body').height() - $('.navbar').height()) - $('footer').height();
        $('.sideMenuLink').css('height', neededHeight);
    </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>
    <script>

        let global = {
            chartName: "myChart",
            time: "day"
        }

        let dateLabels;

        function moodGraph(time) {
            let options = {
                scales: {
                    yAxes: [{
                        display: true,
                        ticks: {
                            suggestedMin: 0,
                            stepSize: 1
                        }
                    }]
                },
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: 'Daily Mood'
                }
            }
            if (time == "month") {
                @{
                    List<double> moodByMonth = new List<double>();
                    foreach(var month in (Model.OrderBy(t => t.DailyInformationDateTime).Select(x => (x.DailyInformationDateTime.Month)).Distinct().ToList()))
                    {
                        moodByMonth.Add(Model.Where(x => x.DailyInformationDateTime.Month == month).Average(x => x.UserMood));
                    }
                }
                preGraph(3, dateLabels, JSON.parse('@Html.Raw(JsonConvert.SerializeObject(moodByMonth))'), options);
            } else {
                preGraph(1,dateLabels,JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.Select(x => x.UserMood).ToList()))'), options);
            }
        }

        $(document).ready(function () {
            if ("@ViewBag.Active7" == 'active' || "@ViewBag.Active30" == 'active') {
                Graph("day",'@ViewBag.curr');
            } else {
                Graph("month",'@ViewBag.curr');
                global.time = "month";
            }
        });

        function Graph(time,type) {
            if (time == "day") {
                dateLabels = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.Select(x => x.DailyInformationDateTime.ToShortDateString()).ToList()))')
            } else {
                dateLabels = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.OrderBy(t => t.DailyInformationDateTime).Select(x => System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(x.DailyInformationDateTime.Month) + " " + x.DailyInformationDateTime.Year).Distinct().ToList()))')
            }
            switch (type) {
                case "mood":
                    moodGraph(time);
                    break;
                case "sleep":
                    sleepGraph(time);
                    break;
                case "averageMood":
                    AverageMoodGraph();
                    break;
                case "workingOut":
                    WorkingOutGraph(time);
                    break;
            }
        }

        function AverageMoodGraph() {
            let options= {
                title: {
                    display: true,
                    text: 'Number of Moods'
                }
            }
            @{
                List<int> mood = new List<int>();
                mood.Add(Model.Count(x => x.UserMood == 1));
                mood.Add(Model.Count(x => x.UserMood == 2));
                mood.Add(Model.Count(x => x.UserMood == 3));
                mood.Add(Model.Count(x => x.UserMood == 4));
                mood.Add(Model.Count(x => x.UserMood == 5));
            }
            preGraph(2, ["Mood: 1", "Mood: 2", "Mood: 3", "Mood: 4", "Mood: 5"],@Html.Raw(JsonConvert.SerializeObject(mood)), options);
        }

        function WorkingOutGraph(time) {
            let options = {
                scales: {
                    yAxes: [{
                        display: true,
                        ticks: {
                            suggestedMin: 0,
                            stepSize: 15
                        }
                    }]
                },
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: 'Minutes Working Out a Day'
                }
            }
            if (time == "month") {
                @{
                    List<double> workoutByMonth = new List<double>();
                    foreach(var month in (Model.OrderBy(t => t.DailyInformationDateTime).Select(x => (x.DailyInformationDateTime.Month)).Distinct().ToList()))
                    {
                        workoutByMonth.Add(Model.Where(x => x.DailyInformationDateTime.Month == month).Average(x => x.MinExercising));
                    }
                }
                preGraph(3, dateLabels, JSON.parse('@Html.Raw(JsonConvert.SerializeObject(workoutByMonth))'), options);
            } else {
                preGraph(1,dateLabels,JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.Select(x => x.MinExercising).ToList()))'), options);
            }
        }

        function SleepGraph(time) {
             let options = {
                scales: {
                    yAxes: [{
                        display: true,
                        ticks: {
                            suggestedMin: 0,
                            stepSize: 1
                        }
                    }]
                },
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: 'Hours of Sleep a Day'
                }
            }
            if (time == "month") {
                @{
                    List<double> sleepByMonth = new List<double>();
                    foreach(var month in (Model.OrderBy(t => t.DailyInformationDateTime).Select(x => (x.DailyInformationDateTime.Month)).Distinct().ToList()))
                    {
                        sleepByMonth.Add(Model.Where(x => x.DailyInformationDateTime.Month == month).Average(x => x.HoursSlept));
                    }
                }
                preGraph(3, dateLabels, JSON.parse('@Html.Raw(JsonConvert.SerializeObject(sleepByMonth))'), options);
            } else {
                preGraph(1,dateLabels,JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.Select(x => x.HoursSlept).ToList()))'), options);
            }
        }

        function ChangeLinkType(type) {
            $(".page-item a").attr("href")
            $(".page-item a").each(function () {
                var $this = $(this);
                var _href = $this.attr("href");
                $this.attr("href", _href + '&curr=' + type);
            });

        }

        $("#mood").click(function () {
            ChangeLinkType("mood");
            Graph(global.time,"mood");
        });

        $("#overalMood").click(function () {
            ChangeLinkType("averageMood");
            AverageMoodGraph();
        });

        $("#workingOut").click(function () {
            ChangeLinkType("workingOut");
            WorkingOutGraph(global.time);
        });

        $("#sleep").click(function () {
            ChangeLinkType("sleep");
            SleepGraph(global.time);
        });
    </script>
}
