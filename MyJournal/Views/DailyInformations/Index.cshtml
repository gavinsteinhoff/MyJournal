@model IEnumerable<MyJournal.Models.CustomModels.DailyInformation>
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Index";
    ViewBag.HomeActive = "active";
}


<div class="row">
    <div class="col bg-dark border-top border-light text-light sideMenuLink">
        @foreach (var item in Model.OrderByDescending(x => x.DailyInformationDateTime))
        {
            <a asp-action="Details" asp-route-id="@item.DailyInformationID">
                @item.DailyInformationDateTime.ToString("MM/dd/yy") - @Html.DisplayFor(modelItem => item.Title)
            </a>
            <br />
        }
    </div>

    <div class="col-12 col-md-10 py-2 bg-light">

        <a class="btn btn-info mb-5" asp-action="Create">Create New</a>

        <nav>
            <ul class="pagination">
                <li class="page-item @ViewBag.Active7">
                    <a class="page-link" asp-action="Index" asp-route-daysOld="7">
                        Past 7 Days
                    </a>
                </li>
                <li class="page-item @ViewBag.Active30">
                    <a class="page-link" asp-action="Index" asp-route-daysOld="30">
                        Past 30 Days
                    </a>
                </li>
                <li class="page-item @ViewBag.Active183">
                    <a class="page-link" asp-action="Index" asp-route-daysOld="183">
                        Past 6 Months
                    </a>
                </li>
                <li class="page-item @ViewBag.Active365">
                    <a class="page-link" asp-action="Index" asp-route-daysOld="365">
                        Past Year
                    </a>
                </li>
            </ul>
        </nav>

        @if (Model.Count() >= 5)
        {
            <canvas id="myChart" height="100"></canvas>
            <div class="stats my-5">
                <div class="stat-holder">
                    <div class="stat" id="mood">
                        @Math.Round(Model.Average(x => x.UserMood), 1)
                    </div>
                    Average Mood
                </div>

                <div class="stat-holder">
                    <div class="stat" id="overalMood">
                        @Model.Count(x => x.UserMood >= 3)
                    </div>
                    Days With Good Mood
                </div>

                <div class="stat-holder">
                    <div class="stat" id="workingOut">
                        @Math.Round(Model.Average(x => x.MinExercising), 0)
                    </div>
                    Average Minutes Working Out a Day
                </div>

                <div class="stat-holder">
                    <div class="stat" id="sleep">
                        @Math.Round(Model.Average(x => x.HoursSlept), 1)
                    </div>
                    Average Hours of Sleep a Day
                </div>

                <div class="stat-holder">
                    <div class="stat">
                        @Model.Count()
                    </div>
                    Journals in this period
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-danger" role="alert" id="error">You must have at least 5 days completed to unlock reporting</div>
        }

    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    @*<script>
            let neededHeight = ($('body').height() - $('.navbar').height()) - $('footer').height();
            $('.sideMenuLink').css('height', neededHeight);
        </script>*@

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>



    @{
        List<double> moodByMonth = new List<double>();
        List<double> sleepByMonth = new List<double>();
        List<double> workOutByMonth = new List<double>();
        foreach (var month in (Model.OrderBy(t => t.DailyInformationDateTime).Select(x => (x.DailyInformationDateTime.Month)).Distinct().ToList()))
        {
            moodByMonth.Add(Model.Where(x => x.DailyInformationDateTime.Month == month).Average(x => x.UserMood));
            sleepByMonth.Add(Model.Where(x => x.DailyInformationDateTime.Month == month).Average(x => x.HoursSlept));
            workOutByMonth.Add(Model.Where(x => x.DailyInformationDateTime.Month == month).Average(x => x.MinExercising));
        }
        List<int> moodByCount = new List<int>();
        moodByCount.Add(Model.Count(x => x.UserMood == 1));
        moodByCount.Add(Model.Count(x => x.UserMood == 2));
        moodByCount.Add(Model.Count(x => x.UserMood == 3));
        moodByCount.Add(Model.Count(x => x.UserMood == 4));
        moodByCount.Add(Model.Count(x => x.UserMood == 5));
    }


    <script>
        $(document).ready(function () {
            ChangeLinkType('@ViewBag.curr');

            global.moodByMonth =    JSON.parse('@Html.Raw(JsonConvert.SerializeObject(moodByMonth))');
            global.sleepByMonth =   JSON.parse('@Html.Raw(JsonConvert.SerializeObject(sleepByMonth))');
            global.workOutByMonth = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(workOutByMonth))');
            global.moodByDay =      JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.Select(x => x.UserMood).ToList()))');
            global.sleepByDay =     JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.Select(x => x.HoursSlept).ToList()))');
            global.workOutByDay =   JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.Select(x => x.MinExercising).ToList()))');

            global.moodByCount =   @Html.Raw(JsonConvert.SerializeObject(moodByCount));

            if ("@ViewBag.Active7" == 'active' || "@ViewBag.Active30" == 'active') {
                Graph("day",'@ViewBag.curr');
            } else {
                Graph("month",'@ViewBag.curr');
                global.time = "month";
            }
        });

        function Graph(time,type) {
            if (time == "day") {
                global.dateLabels = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.OrderBy(t => t.DailyInformationDateTime).Select(x => x.DailyInformationDateTime.ToShortDateString()).ToList()))')
            } else {
                global.dateLabels = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.OrderBy(t => t.DailyInformationDateTime).Select(x => System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(x.DailyInformationDateTime.Month) + " " + x.DailyInformationDateTime.Year).Distinct().ToList()))')
            }
            switch (type) {
                case "mood":
                    moodGraph(time);
                    $("#mood").addClass("active");
                    break;
                case "sleep":
                    SleepGraph(time);
                    $("#sleep").addClass("active");
                    break;
                case "averageMood":
                    AverageMoodGraph();
                    $("#overalMood").addClass("active");
                    break;
                case "workingOut":
                    WorkingOutGraph(time);
                    $("#workingOut").addClass("active");
                    break;
            }
        }
    </script>
}
